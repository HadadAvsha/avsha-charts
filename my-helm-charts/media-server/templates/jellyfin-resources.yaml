{{- if .Values.general.serviceAccount.create -}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "k8s-mediaserver.serviceAccountName" . }}
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
  {{- with .Values.general.serviceAccount.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.jellyfin.service.name }}
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  selector:
    app: jellyfin
  ports:
    - name: http
      protocol: TCP
      {{ if eq .Values.jellyfin.service.type "externalIPs" }}
      port: 80
      {{  else }}
      port: 8096
      {{ end }}
      {{ if eq .Values.jellyfin.service.type "externalIPs" }}
      targetPort: 8096
      {{  else }}
      targetPort: http
      {{  end }}
{{ if eq .Values.jellyfin.service.type "NodePort" }}
      nodePort: {{ .Values.jellyfin.service.nodePort }}
{{ end }}
  {{ if .Values.jellyfin.ingress.enabled }} 
  type: ClusterIP
  {{ else if eq .Values.jellyfin.service.type "NodePort" }}
  type: NodePort
  {{ end }}
  {{ if eq .Values.jellyfin.service.type "externalIPs" }} 
  externalIPs:
    - {{ .Values.jellyfin.service.externalIPs }}
  {{  end }}
---
{{- if .Values.jellyfin.ingress.enabled -}}
apiVersion: networking.k8s.io/v1
metadata:
  name: jellyfin-ingress
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
  {{- with .Values.jellyfin.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  ingressClassName: {{ .Values.jellyfin.ingress.ingressClassName | quote }}
  rules:
    - host: {{ .Values.jellyfin.ingress.host }}
      http:
        paths:
          - path: {{ default "" .Values.jellyfin.ingress.path }}
            backend:
              serviceName: {{ .Values.jellyfin.service.name }}
              servicePort: {{ .Values.jellyfin.ingress.port }}
  {{- if .Values.jellyfin.ingress.tls }}
  tls:
  - secretName: {{ .Values.jellyfin.ingress.tls.secretName }}
    hosts:
      - {{ .Values.jellyfin.ingress.host | quote }}
    {{- end }}
{{- end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jellyfin
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
{{- if not .Values.jellyfin.autoscaling.enabled }}
  replicas: {{ .Values.jellyfin.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "k8s-mediaserver.selectorLabels" . | nindent 6 }}
  serviceName: {{ .Values.jellyfin.service.name }}
  template:
    metadata:
    {{- with .Values.jellyfin.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "k8s-mediaserver.selectorLabels" . | nindent 8 }}
        app: jellyfin
    spec:
      {{- with .Values.jellyfin.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "k8s-mediaserver.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.jellyfin.podSecurityContext | nindent 8 }}
      volumes:
      {{- if not .Values.jellyfin.persistence.enabled }}
        - name: data
          emptyDir: {}
      {{- end }}
      {{- if and .Values.jellyfin.persistence.enabled .Values.jellyfin.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.jellyfin.persistence.existingClaim }}
      {{- end }}
      containers:
        - name: jellyfin
          securityContext:
            {{- toYaml .Values.jellyfin.securityContext | nindent 12 }}
          image: "{{ .Values.jellyfin.image.repository }}:{{ .Values.jellyfin.image.tag | default .Values.general.image_tag }}"
          imagePullPolicy: {{ .Values.jellyfin.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8096
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {{- toYaml .Values.jellyfin.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /config
              subPath: "{{ .Values.general.storage.subPaths.config }}/jellyfin"
            - name: data
              mountPath: "/tv"
              subPath: "{{ .Values.general.storage.subPaths.tv }}"
            - name: data
              mountPath: "/movies"
              subPath: "{{ .Values.general.storage.subPaths.movies }}"
      {{- with .Values.jellyfin.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jellyfin.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jellyfin.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

  volumeClaimTemplates:
  {{- if and .Values.jellyfin.persistence.enabled (not .Values.jellyfin.persistence.existingClaim) }}
  - metadata:
      name: data
      labels:
        {{- include "k8s-mediaserver.labels" . | nindent 4 }}
    {{- if .Values.jellyfin.persistence.annotations }}
      annotations:
    {{ toYaml .Values.jellyfin.persistence.annotations | indent 4 }}
    {{- end }}
    spec:
      accessModes: [ {{ .Values.jellyfin.persistence.accessMode | quote }} ]
      resources:
        requests:
          storage: {{ .Values.jellyfin.persistence.size | quote }}
    {{- if .Values.jellyfin.persistence.storageClass }}
    {{- if (eq "-" .Values.jellyfin.persistence.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: {{ .Values.jellyfin.persistence.storageClass | quote }}
    {{- end }}
    {{- end }}
  {{- end }}
